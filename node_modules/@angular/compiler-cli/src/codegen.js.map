{"version":3,"file":"codegen.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler-cli/src/codegen.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Transform template html and css into executable code.\n * Intended to be used in a build step.\n */\nimport * as compiler from '@angular/compiler';\nimport {ViewEncapsulation} from '@angular/core';\nimport {AngularCompilerOptions, NgcCliOptions} from '@angular/tsc-wrapped';\nimport {readFileSync} from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {PathMappedReflectorHost} from './path_mapped_reflector_host';\nimport {Console} from './private_import_core';\nimport {ReflectorHost, ReflectorHostContext} from './reflector_host';\nimport {StaticAndDynamicReflectionCapabilities} from './static_reflection_capabilities';\nimport {StaticReflector, StaticReflectorHost, StaticSymbol} from './static_reflector';\n\nconst GENERATED_FILES = /\\.ngfactory\\.ts$|\\.css\\.ts$|\\.css\\.shim\\.ts$/;\nconst GENERATED_OR_DTS_FILES = /\\.d\\.ts$|\\.ngfactory\\.ts$|\\.css\\.ts$|\\.css\\.shim\\.ts$/;\n\nconst PREAMBLE = `/**\n * @fileoverview This file is generated by the Angular 2 template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties}\n */\n /* tslint:disable */\n\n`;\n\nexport class CodeGenerator {\n  constructor(\n      private options: AngularCompilerOptions, private program: ts.Program,\n      public host: ts.CompilerHost, private staticReflector: StaticReflector,\n      private compiler: compiler.OfflineCompiler, private reflectorHost: StaticReflectorHost) {}\n\n  // Write codegen in a directory structure matching the sources.\n  private calculateEmitPath(filePath: string): string {\n    let root = this.options.basePath;\n    for (const eachRootDir of this.options.rootDirs || []) {\n      if (this.options.trace) {\n        console.error(`Check if ${filePath} is under rootDirs element ${eachRootDir}`);\n      }\n      if (path.relative(eachRootDir, filePath).indexOf('.') !== 0) {\n        root = eachRootDir;\n      }\n    }\n\n    // transplant the codegen path to be inside the `genDir`\n    let relativePath: string = path.relative(root, filePath);\n    while (relativePath.startsWith('..' + path.sep)) {\n      // Strip out any `..` path such as: `../node_modules/@foo` as we want to put everything\n      // into `genDir`.\n      relativePath = relativePath.substr(3);\n    }\n\n    return path.join(this.options.genDir, relativePath);\n  }\n\n  codegen(options: {transitiveModules: boolean}): Promise<any> {\n    const staticSymbols =\n        extractProgramSymbols(this.program, this.staticReflector, this.reflectorHost, this.options);\n\n    return this.compiler.compileModules(staticSymbols, options).then(generatedModules => {\n      generatedModules.forEach(generatedModule => {\n        const sourceFile = this.program.getSourceFile(generatedModule.fileUrl);\n        const emitPath = this.calculateEmitPath(generatedModule.moduleUrl);\n        this.host.writeFile(\n            emitPath, PREAMBLE + generatedModule.source, false, () => {}, [sourceFile]);\n      });\n    });\n  }\n\n  static create(\n      options: AngularCompilerOptions, cliOptions: NgcCliOptions, program: ts.Program,\n      compilerHost: ts.CompilerHost, reflectorHostContext?: ReflectorHostContext,\n      resourceLoader?: compiler.ResourceLoader, reflectorHost?: ReflectorHost): CodeGenerator {\n    resourceLoader = resourceLoader || {\n      get: (s: string) => {\n        if (!compilerHost.fileExists(s)) {\n          // TODO: We should really have a test for error cases like this!\n          throw new Error(`Compilation failed. Resource file not found: ${s}`);\n        }\n        return Promise.resolve(compilerHost.readFile(s));\n      }\n    };\n    const transFile = cliOptions.i18nFile;\n    const locale = cliOptions.locale;\n    let transContent: string = '';\n    if (transFile) {\n      if (!locale) {\n        throw new Error(\n            `The translation file (${transFile}) locale must be provided. Use the --locale option.`);\n      }\n      transContent = readFileSync(transFile, 'utf8');\n    }\n\n    const urlResolver: compiler.UrlResolver = compiler.createOfflineCompileUrlResolver();\n    if (!reflectorHost) {\n      const usePathMapping = !!options.rootDirs && options.rootDirs.length > 0;\n      reflectorHost = usePathMapping ?\n          new PathMappedReflectorHost(program, compilerHost, options, reflectorHostContext) :\n          new ReflectorHost(program, compilerHost, options, reflectorHostContext);\n    }\n    const staticReflector = new StaticReflector(reflectorHost);\n    StaticAndDynamicReflectionCapabilities.install(staticReflector);\n    const htmlParser =\n        new compiler.I18NHtmlParser(new compiler.HtmlParser(), transContent, cliOptions.i18nFormat);\n    const config = new compiler.CompilerConfig({\n      genDebugInfo: options.debug === true,\n      defaultEncapsulation: ViewEncapsulation.Emulated,\n      logBindingUpdate: false,\n      useJit: false\n    });\n    const normalizer =\n        new compiler.DirectiveNormalizer(resourceLoader, urlResolver, htmlParser, config);\n    const expressionParser = new compiler.Parser(new compiler.Lexer());\n    const elementSchemaRegistry = new compiler.DomElementSchemaRegistry();\n    const console = new Console();\n    const tmplParser = new compiler.TemplateParser(\n        expressionParser, elementSchemaRegistry, htmlParser, console, []);\n    const resolver = new compiler.CompileMetadataResolver(\n        new compiler.NgModuleResolver(staticReflector),\n        new compiler.DirectiveResolver(staticReflector), new compiler.PipeResolver(staticReflector),\n        elementSchemaRegistry, normalizer, staticReflector);\n    // TODO(vicb): do not pass cliOptions.i18nFormat here\n    const offlineCompiler = new compiler.OfflineCompiler(\n        resolver, tmplParser, new compiler.StyleCompiler(urlResolver),\n        new compiler.ViewCompiler(config, elementSchemaRegistry),\n        new compiler.DirectiveWrapperCompiler(\n            config, expressionParser, elementSchemaRegistry, console),\n        new compiler.NgModuleCompiler(), new compiler.TypeScriptEmitter(reflectorHost),\n        cliOptions.locale, cliOptions.i18nFormat,\n        new compiler.AnimationParser(elementSchemaRegistry));\n\n    return new CodeGenerator(\n        options, program, compilerHost, staticReflector, offlineCompiler, reflectorHost);\n  }\n}\n\nexport function extractProgramSymbols(\n    program: ts.Program, staticReflector: StaticReflector, reflectorHost: StaticReflectorHost,\n    options: AngularCompilerOptions): StaticSymbol[] {\n  // Compare with false since the default should be true\n  const skipFileNames =\n      options.generateCodeForLibraries === false ? GENERATED_OR_DTS_FILES : GENERATED_FILES;\n\n  const staticSymbols: StaticSymbol[] = [];\n\n  program.getSourceFiles()\n      .filter(sourceFile => !skipFileNames.test(sourceFile.fileName))\n      .forEach(sourceFile => {\n        const absSrcPath = reflectorHost.getCanonicalFileName(sourceFile.fileName);\n\n        const moduleMetadata = staticReflector.getModuleMetadata(absSrcPath);\n        if (!moduleMetadata) {\n          console.warn(`WARNING: no metadata found for ${absSrcPath}`);\n          return;\n        }\n\n        const metadata = moduleMetadata['metadata'];\n\n        if (!metadata) {\n          return;\n        }\n\n        for (const symbol of Object.keys(metadata)) {\n          if (metadata[symbol] && metadata[symbol].__symbolic == 'error') {\n            // Ignore symbols that are only included to record error information.\n            continue;\n          }\n          staticSymbols.push(reflectorHost.findDeclaration(absSrcPath, symbol, absSrcPath));\n        }\n      });\n\n  return staticSymbols;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}